// File generated by Marble

using System.Threading.Tasks;
using Marble.Messaging.Contracts.Abstractions;
using Marble.Messaging.Contracts.Models.Message;

namespace Marble.FunctionalTests.Clients
{
    public interface IInt32TestServiceClient : IControllerClient
    {
        Task<int> MethodWithParametersReturnsInt(int value);

        Task<int> MethodWithoutParametersReturnsInt();

        Task MethodWithParametersReturnsVoid(int value);

        Task MethodWithoutParametersReturnsVoid();

        Task<int> MethodWithoutParametersReturnsTaskInt(int value);

        Task<int> MethodWithoutParametersReturnsTaskInt();

        Task MethodWithoutParametersReturnsTask(int value);

        Task MethodWithoutParametersReturnsTask();

        Task<int> MethodWithoutParametersReturnsAsyncTaskInt(int value);

        Task<int> MethodWithoutParametersReturnsAsyncTaskInt();

        Task MethodWithoutParametersReturnsAsyncTask(int value);

        Task MethodWithoutParametersReturnsAsyncTask();
    }

    public sealed class DefaultInt32TestServiceClient : IInt32TestServiceClient
    {
        private readonly IMessagingClient messagingClient;

        public DefaultInt32TestServiceClient(IMessagingClient messagingClient)
        {
            this.messagingClient = messagingClient;
        }

        public Task<int> MethodWithParametersReturnsInt(int value)
        {
            return this.messagingClient.InvokeProcedureAsync<int>("Marble.FunctionalTests.Int32TestService",
                "MethodWithParametersReturnsInt",
                new Int32TestServiceMethodWithParametersReturnsIntParametersModel(value));
        }

        public Task<int> MethodWithoutParametersReturnsInt()
        {
            return this.messagingClient.InvokeProcedureAsync<int>("Marble.FunctionalTests.Int32TestService",
                "MethodWithoutParametersReturnsInt");
        }

        public Task MethodWithParametersReturnsVoid(int value)
        {
            return this.messagingClient.CallProcedureAsync("Marble.FunctionalTests.Int32TestService",
                "MethodWithParametersReturnsVoid",
                new Int32TestServiceMethodWithParametersReturnsVoidParametersModel(value));
        }

        public Task MethodWithoutParametersReturnsVoid()
        {
            return this.messagingClient.CallProcedureAsync("Marble.FunctionalTests.Int32TestService",
                "MethodWithoutParametersReturnsVoid");
        }

        public Task<int> MethodWithoutParametersReturnsTaskInt(int value)
        {
            return this.messagingClient.InvokeProcedureAsync<int>("Marble.FunctionalTests.Int32TestService",
                "MethodWithoutParametersReturnsTaskInt",
                new Int32TestServiceMethodWithoutParametersReturnsTaskIntParametersModel(value));
        }

        public Task<int> MethodWithoutParametersReturnsTaskInt()
        {
            return this.messagingClient.InvokeProcedureAsync<int>("Marble.FunctionalTests.Int32TestService",
                "MethodWithoutParametersReturnsTaskInt");
        }

        public Task MethodWithoutParametersReturnsTask(int value)
        {
            return this.messagingClient.CallProcedureAsync("Marble.FunctionalTests.Int32TestService",
                "MethodWithoutParametersReturnsTask",
                new Int32TestServiceMethodWithoutParametersReturnsTaskParametersModel(value));
        }

        public Task MethodWithoutParametersReturnsTask()
        {
            return this.messagingClient.CallProcedureAsync("Marble.FunctionalTests.Int32TestService",
                "MethodWithoutParametersReturnsTask");
        }

        public Task<int> MethodWithoutParametersReturnsAsyncTaskInt(int value)
        {
            return this.messagingClient.InvokeProcedureAsync<int>("Marble.FunctionalTests.Int32TestService",
                "MethodWithoutParametersReturnsAsyncTaskInt",
                new Int32TestServiceMethodWithoutParametersReturnsAsyncTaskIntParametersModel(value));
        }

        public Task<int> MethodWithoutParametersReturnsAsyncTaskInt()
        {
            return this.messagingClient.InvokeProcedureAsync<int>("Marble.FunctionalTests.Int32TestService",
                "MethodWithoutParametersReturnsAsyncTaskInt");
        }

        public Task MethodWithoutParametersReturnsAsyncTask(int value)
        {
            return this.messagingClient.CallProcedureAsync("Marble.FunctionalTests.Int32TestService",
                "MethodWithoutParametersReturnsAsyncTask",
                new Int32TestServiceMethodWithoutParametersReturnsAsyncTaskParametersModel(value));
        }

        public Task MethodWithoutParametersReturnsAsyncTask()
        {
            return this.messagingClient.CallProcedureAsync("Marble.FunctionalTests.Int32TestService",
                "MethodWithoutParametersReturnsAsyncTask");
        }
    }


    public sealed class Int32TestServiceMethodWithParametersReturnsIntParametersModel : ParametersModel
    {
        public Int32TestServiceMethodWithParametersReturnsIntParametersModel()
        {
        }

        public Int32TestServiceMethodWithParametersReturnsIntParametersModel(int value)
        {
            this.Value = value;
        }

        public int Value { get; set; }

        public override object[] ToObjectArray()
        {
            return new object[]
            {
                this.Value
            };
        }
    }


    public sealed class Int32TestServiceMethodWithParametersReturnsVoidParametersModel : ParametersModel
    {
        public Int32TestServiceMethodWithParametersReturnsVoidParametersModel()
        {
        }

        public Int32TestServiceMethodWithParametersReturnsVoidParametersModel(int value)
        {
            this.Value = value;
        }

        public int Value { get; set; }

        public override object[] ToObjectArray()
        {
            return new object[]
            {
                this.Value
            };
        }
    }


    public sealed class Int32TestServiceMethodWithoutParametersReturnsTaskIntParametersModel : ParametersModel
    {
        public Int32TestServiceMethodWithoutParametersReturnsTaskIntParametersModel()
        {
        }

        public Int32TestServiceMethodWithoutParametersReturnsTaskIntParametersModel(int value)
        {
            this.Value = value;
        }

        public int Value { get; set; }

        public override object[] ToObjectArray()
        {
            return new object[]
            {
                this.Value
            };
        }
    }


    public sealed class Int32TestServiceMethodWithoutParametersReturnsTaskParametersModel : ParametersModel
    {
        public Int32TestServiceMethodWithoutParametersReturnsTaskParametersModel()
        {
        }

        public Int32TestServiceMethodWithoutParametersReturnsTaskParametersModel(int value)
        {
            this.Value = value;
        }

        public int Value { get; set; }

        public override object[] ToObjectArray()
        {
            return new object[]
            {
                this.Value
            };
        }
    }


    public sealed class Int32TestServiceMethodWithoutParametersReturnsAsyncTaskIntParametersModel : ParametersModel
    {
        public Int32TestServiceMethodWithoutParametersReturnsAsyncTaskIntParametersModel()
        {
        }

        public Int32TestServiceMethodWithoutParametersReturnsAsyncTaskIntParametersModel(int value)
        {
            this.Value = value;
        }

        public int Value { get; set; }

        public override object[] ToObjectArray()
        {
            return new object[]
            {
                this.Value
            };
        }
    }


    public sealed class Int32TestServiceMethodWithoutParametersReturnsAsyncTaskParametersModel : ParametersModel
    {
        public Int32TestServiceMethodWithoutParametersReturnsAsyncTaskParametersModel()
        {
        }

        public Int32TestServiceMethodWithoutParametersReturnsAsyncTaskParametersModel(int value)
        {
            this.Value = value;
        }

        public int Value { get; set; }

        public override object[] ToObjectArray()
        {
            return new object[]
            {
                this.Value
            };
        }
    }
}