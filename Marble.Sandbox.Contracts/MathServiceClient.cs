// File generated by Marble

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Marble.Messaging.Contracts.Abstractions;
using Marble.Messaging.Contracts.Models;
using Marble.Sandbox.Contracts.Models;

namespace Marble.Sandbox.Contracts
{
    public interface IMathServiceClient : IControllerClient
    {
        Task<int> AddReturnInt(int a, int b);

        Task<int> AddReturnIntThrowException(int a, int b);

        Task<int> AddReturnTaskInt(int a, int b);

        Task AddReturnTask(int a, int b);

        Task AddReturnVoid(int a, int b);

        Task<MathResult> AddReturnObject(int a, int b);

        Task<MathResult> AddReturnTaskObject(int a, int b);

        Task<List<MathResult>> ReturnListTask(int a, int b);

        Task<List<MathResult>> ReturnList(int a, int b);

        Task<List<int>> ReturnListIntTask(int a, int b);

        Task<List<int>> ReturnListInt(int a, int b);

        Task<Guid> ReturnGuid(int a, int b);

        Task<Guid?> ReturnNullGuid(int a, int b);

        Task<MathResult> ReturnNull(int a, int b);

        Task<MathResult> AddReturnTaskObjectThrowException(int a, int b);

        IObservable<int> StartMathStreamReturnInt(int start);

        IObservable<MathResult> StartMathStreamReturnObject(int start);

        IObservable<MathResult> StartMathStreamReturnObjectThrowException(int start);
    }

    public class DefaultMathServiceClient : IMathServiceClient
    {
        private readonly IMessagingClient messagingClient;

        public DefaultMathServiceClient(IMessagingClient messagingClient)
        {
            this.messagingClient = messagingClient;
        }

        public Task<int> AddReturnInt(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<int>(new RequestMessage("Marble.Sandbox.MathService",
                "AddReturnInt", a, b));
        }

        public Task<int> AddReturnIntThrowException(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<int>(new RequestMessage("Marble.Sandbox.MathService",
                "AddReturnIntThrowException", a, b));
        }

        public Task<int> AddReturnTaskInt(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<int>(new RequestMessage("Marble.Sandbox.MathService",
                "AddReturnTaskInt", a, b));
        }

        public Task AddReturnTask(int a, int b)
        {
            return this.messagingClient.CallProcedureAsync(new RequestMessage("Marble.Sandbox.MathService",
                "AddReturnTask", a, b));
        }

        public Task AddReturnVoid(int a, int b)
        {
            return this.messagingClient.CallProcedureAsync(new RequestMessage("Marble.Sandbox.MathService",
                "AddReturnVoid", a, b));
        }

        public Task<MathResult> AddReturnObject(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<MathResult>(
                new RequestMessage("Marble.Sandbox.MathService", "AddReturnObject", a, b));
        }

        public Task<MathResult> AddReturnTaskObject(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<MathResult>(
                new RequestMessage("Marble.Sandbox.MathService", "AddReturnTaskObject", a, b));
        }

        public Task<List<MathResult>> ReturnListTask(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<List<MathResult>>(
                new RequestMessage("Marble.Sandbox.MathService", "ReturnListTask", a, b));
        }

        public Task<List<MathResult>> ReturnList(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<List<MathResult>>(
                new RequestMessage("Marble.Sandbox.MathService", "ReturnList", a, b));
        }

        public Task<List<int>> ReturnListIntTask(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<List<int>>(new RequestMessage("Marble.Sandbox.MathService",
                "ReturnListIntTask", a, b));
        }

        public Task<List<int>> ReturnListInt(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<List<int>>(new RequestMessage("Marble.Sandbox.MathService",
                "ReturnListInt", a, b));
        }

        public Task<Guid> ReturnGuid(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<Guid>(new RequestMessage("Marble.Sandbox.MathService",
                "ReturnGuid", a, b));
        }

        public Task<Guid?> ReturnNullGuid(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<Guid?>(new RequestMessage("Marble.Sandbox.MathService",
                "ReturnNullGuid", a, b));
        }

        public Task<MathResult> ReturnNull(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<MathResult>(
                new RequestMessage("Marble.Sandbox.MathService", "ReturnNull", a, b));
        }

        public Task<MathResult> AddReturnTaskObjectThrowException(int a, int b)
        {
            return this.messagingClient.InvokeProcedureAsync<MathResult>(
                new RequestMessage("Marble.Sandbox.MathService", "AddReturnTaskObjectThrowException", a, b));
        }

        public IObservable<int> StartMathStreamReturnInt(int start)
        {
            return this.messagingClient.InvokeProcedureStream<int>(new RequestMessage("Marble.Sandbox.MathService",
                "StartMathStreamReturnInt", start));
        }

        public IObservable<MathResult> StartMathStreamReturnObject(int start)
        {
            return this.messagingClient.InvokeProcedureStream<MathResult>(
                new RequestMessage("Marble.Sandbox.MathService", "StartMathStreamReturnObject", start));
        }

        public IObservable<MathResult> StartMathStreamReturnObjectThrowException(int start)
        {
            return this.messagingClient.InvokeProcedureStream<MathResult>(
                new RequestMessage("Marble.Sandbox.MathService", "StartMathStreamReturnObjectThrowException", start));
        }
    }
}