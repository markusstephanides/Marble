{% for usingDirective in UsingDirectives %}using {{ usingDirective }};
{% endfor %}
namespace {{ Namespace }}
{
public interface I{{ ClassName }} : IControllerClient {
{% for procedure in Procedures %}
    {{ procedure.MethodReturnType }} {{ procedure.MethodName }}({% for param in procedure.Parameters %}{{ param.ReadableTypeName }} {{ param.Name }}{% unless forloop.last %}, {% endunless %}{% endfor %});
{% endfor %}
}

public class Default{{ ClassName }}Client : I{{ ClassName }} {

private readonly IMessagingClient messagingClient;

public Default{{ ClassName }}Client(IMessagingClient messagingClient)
{
this.messagingClient = messagingClient;
}

{% for procedure in Procedures %}        public {{ procedure.MethodReturnType }} {{ procedure.MethodName }}({% for param in procedure.Parameters %}{{ param.ReadableTypeName }} {{ param.Name }}{% unless forloop.last %}, {% endunless %}{% endfor %}){
    return this.messagingClient.{% if procedure.ReturnTypeVariant == "Stream" %}InvokeProcedureStream<{{ procedure.PureReturnType }}>{% elsif procedure.ReturnTypeVariant == "Single" %}InvokeProcedureAsync<{{ procedure.PureReturnType }}>{% elsif procedure.ReturnTypeVariant == "Void" %}CallProcedureAsync{% endif %}(new RequestMessage("{{ ServiceName }}", "{{ procedure.Name }}", {% for param in procedure.Parameters %}{{ param.Name }}{% unless forloop.last %}, {% endunless %}{% endfor %}));
    }

{% endfor %}
}
}